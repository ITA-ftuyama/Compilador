
/*
	Testes Realizados:

•	O identificador de uma chamada de procedimento e o identificador de uma chamada de função deve ser do tipo nome de função. 
•	Um identificador de variável e de parâmetro deve ser do tipo nome de variável.
•	O tipo de variável correspondente ao identificador de uma chamada de procedimento deve ser o tipo vazio.
•	O tipo de variável correspondente ao identificador de uma chamada de função não deve ser o tipo vazio.
•	O número de argumentos na chamada de uma função ou procedimento deve ser igual ao número de parâmetros do mesmo. 
•	Deve haver compatibilidade entre um argumento de chamada de uma função ou procedimento e seu parâmetro correspondente, conforme a seguinte tabela:

								Tipo do parâmetro	Tipo do argumento
								Inteiro	Expressão inteira ou caractere
								Real	Expressão inteira, real ou caractere
								Caractere	Expressão inteira ou caractere
								Lógico	Expressão de valor lógico

 */

globais:
	int varint;
	real varreal;
	carac varchar;
	logico varlogico;

funcoes:
vazio InserirVazio () {
locais:
	int var;
comandos:
	;
}
vazio InserirVazio (

***** Exception<Declaracao Indevida>: InserirVazio *****
int a) {
locais:
	int var;
comandos:
	;
}
vazio InserirVariosVazio (int a, real b, carac c, logico d) {
locais:
	int var;
comandos:
	;
}
int InserirOne (int a) {
locais:
	int var;
comandos:
	retornar a;
}
real InserirReal (real a) {
locais:
	int var;
comandos:
	retornar a;
}
int Inserir (int a, int b) {
locais:
	int var;
comandos:
	var := a + b;
	retornar var;
}
int InserirVarios (int a, real b, carac c, logico d) {
locais:
	int var;
comandos:
	retornar a;
}
principal {
locais:
	int var;
comandos:
	
/* Testando o numero de argumentos de funcao*/

var := InserirOne (varint);
	var := InserirOne ()

***** Exception<Incompatibilidade>: Numero de argumentos diferente do numero de parametros *****
;
	var := InserirOne (varint, varint)

***** Exception<Incompatibilidade>: Numero de argumentos diferente do numero de parametros *****
;

/* Testando compatibilidade de argumentos de funcao*/

	var := InserirOne (varlogico)

***** Exception<Incompatibilidade>: Esperado "int, carac". Obtido "real, logico" *****
;
	var := Inserir (varint, varint);
	var := InserirVarios (varint, varreal, varchar, varlogico);
	var := InserirVarios (varint, varint, varint, varint)

***** Exception<Incompatibilidade>: Esperado "logico". Obtido "int, carac, real" *****
;
	var := InserirVarios (varreal, varreal, varreal, varreal)

***** Exception<Incompatibilidade>: Esperado "int, carac". Obtido "real, logico" *****


***** Exception<Incompatibilidade>: Esperado "int, carac". Obtido "real, logico" *****


***** Exception<Incompatibilidade>: Esperado "logico". Obtido "int, carac, real" *****
;
	var := InserirVarios (varchar, varchar, varchar, varchar)

***** Exception<Incompatibilidade>: Esperado "logico". Obtido "int, carac, real" *****
;
	var := InserirVarios (varlogico, varlogico, varlogico, varlogico)

***** Exception<Incompatibilidade>: Esperado "int, carac". Obtido "real, logico" *****


***** Exception<Incompatibilidade>: Esperado "int, carac, real". Obtido "logico" *****


***** Exception<Incompatibilidade>: Esperado "int, carac". Obtido "real, logico" *****
;
	var := InserirVazio (

***** Exception<Tipo Inadequado>: InserirVazio *****
);

/* Testando numero de argumentos de procedimento */

	chamar InserirVazio();
	chamar InserirOne(

***** Exception<Tipo Inadequado>: InserirOne *****
varint);
	chamar InserirVazio(varint);


***** Exception<Incompatibilidade>: Numero de argumentos diferente do numero de parametros *****

/* Testando compatibilidade de argumentos de procedimento */

	chamar InserirVariosVazio(varint, varreal, varchar, varlogico);
	chamar InserirVariosVazio(varint, varreal, varlogico, varchar);


***** Exception<Incompatibilidade>: Esperado "int, carac". Obtido "real, logico" *****


***** Exception<Incompatibilidade>: Esperado "logico". Obtido "int, carac, real" *****
	chamar InserirVariosVazio(varreal, varint, varlogico, varchar);


***** Exception<Incompatibilidade>: Esperado "int, carac". Obtido "real, logico" *****


***** Exception<Incompatibilidade>: Esperado "int, carac". Obtido "real, logico" *****


***** Exception<Incompatibilidade>: Esperado "logico". Obtido "int, carac, real" *****
	var := InserirNenhum (

***** Exception<Nao Declarado>: InserirNenhum *****
);
	chamar varint(

***** Exception<Tipo Inadequado>: varint *****
);

/*Testando compatibilidade entre alguns tipos */

	varreal := InserirReal (varreal);
	varreal := InserirReal (varint);
	varreal := InserirReal (varchar);
	varreal := InserirReal (varlogico)

***** Exception<Incompatibilidade>: Esperado "int, carac, real". Obtido "logico" *****
;
}

varlogico: Nao Inicializada
var: Nao Inicializada
var: Nao Referenciada
var: Nao Inicializada
var: Nao Referenciada
var: Nao Inicializada
var: Nao Referenciada
var: Nao Inicializada
var: Nao Referenciada
var: Nao Inicializada
var: Nao Referenciada
var: Nao Inicializada
var: Nao Referenciada
varchar: Nao Inicializada
varint: Nao Inicializada


   TABELA  DE  SIMBOLOS:

Classe 0:
  (varlogico, IDVAR, LOGIC  , 0, 1, escopo: Global);
Classe 3:
  (InserirVarios, IDFUNC, escopo: Global
	Variaveis: var
	Parametros: a, b, c, d);
Classe 5:
  (a       , IDVAR, INTEGER, 1, 1, escopo: InserirVarios);
  (a       , IDVAR, INTEGER, 1, 1, escopo: Inserir);
  (a       , IDVAR, FLOAT  , 1, 1, escopo: InserirReal);
  (a       , IDVAR, INTEGER, 1, 1, escopo: InserirOne);
  (a       , IDVAR, INTEGER, 1, 1, escopo: InserirVariosVazio);
  (a       , IDVAR, INTEGER, 1, 1, escopo: InserirVazio);
Classe 6:
  (b       , IDVAR, FLOAT  , 1, 1, escopo: InserirVarios);
  (b       , IDVAR, INTEGER, 1, 1, escopo: Inserir);
  (b       , IDVAR, FLOAT  , 1, 1, escopo: InserirVariosVazio);
Classe 7:
  (var     , IDVAR, INTEGER, 1, 1, escopo: Principal);
  (var     , IDVAR, INTEGER, 0, 0, escopo: InserirVarios);
  (c       , IDVAR, CHAR   , 1, 1, escopo: InserirVarios);
  (var     , IDVAR, INTEGER, 1, 1, escopo: Inserir);
  (var     , IDVAR, INTEGER, 0, 0, escopo: InserirReal);
  (var     , IDVAR, INTEGER, 0, 0, escopo: InserirOne);
  (var     , IDVAR, INTEGER, 0, 0, escopo: InserirVariosVazio);
  (c       , IDVAR, CHAR   , 1, 1, escopo: InserirVariosVazio);
  (var     , IDVAR, INTEGER, 0, 0, escopo: InserirVazio);
  (var     , IDVAR, INTEGER, 0, 0, escopo: InserirVazio);
  (varchar , IDVAR, CHAR   , 0, 1, escopo: Global);
Classe 8:
  (d       , IDVAR, LOGIC  , 1, 1, escopo: InserirVarios);
  (d       , IDVAR, LOGIC  , 1, 1, escopo: InserirVariosVazio);
Classe 10:
  (Principal, IDFUNC, escopo: Global
	Variaveis: var
	Parametros: void);
  (InserirOne, IDFUNC, escopo: Global
	Variaveis: var
	Parametros: a);
Classe 11:
  (InserirVazio, IDFUNC, escopo: Global
	Variaveis: var
	Parametros: a);
  (InserirVazio, IDFUNC, escopo: Global
	Variaveis: var
	Parametros: void);
Classe 13:
  (varreal , IDVAR, FLOAT  , 1, 1, escopo: Global);
Classe 16:
  (InserirReal, IDFUNC, escopo: Global
	Variaveis: var
	Parametros: a);
  (varint  , IDVAR, INTEGER, 0, 1, escopo: Global);
Classe 18:
  (InserirVariosVazio, IDFUNC, escopo: Global
	Variaveis: var
	Parametros: a, b, c, d);
  (Global  , IDGLOB, escopo: NULL
	Variaveis: varint, varreal, varchar, varlogico
	Funcoes: InserirVazio, InserirVazio, InserirVariosVazio, InserirOne, InserirReal, Inserir, InserirVarios, Principal);
Classe 19:
  (Inserir , IDFUNC, escopo: Global
	Variaveis: var
	Parametros: a, b);
