
/*
	Testes Realizados:

•	Todo comando retornar dentro de uma função de tipo vazio não deve ser seguido de expressão e dentro de funções de outros tipos deve ser seguido por uma expressão. 
•	Deve haver compatibilidade entre o tipo de uma função e o tipo da expressão de qualquer comando retornar em seu escopo, conforme a seguinte tabela:
								Tipo da função	Tipo da expressão retornada
								Inteiro	Inteiro ou Caractere
								Real	Inteiro, Real ou Caractere
								Caractere	Inteiro ou Caractere
								Lógico	Lógico

•	Funções não são usados como parâmetros ou argumentos de chamada de outras funções.
•	A linguagem não admite recursividade.

 */

globais:
	int varint;
	real varreal;
	carac varchar;
	logico varlogico;

funcoes:
vazio InserirVazioCorreto () {
locais:
	int var;
comandos:
	;
}
vazio InserirVazioIncorreto1 () {
locais:
	int var;
comandos:
	retornar var;


***** Exception<Incompatibilidade>: Obtido: int. Esperado: vazio *****
}
vazio InserirVazioIncorreto2 () {
locais:
	real var;
comandos:
	retornar var;


***** Exception<Incompatibilidade>: Obtido: real. Esperado: vazio *****
}
vazio InserirVazioIncorreto3 () {
locais:
	carac var;
comandos:
	retornar var;


***** Exception<Incompatibilidade>: Obtido: carac. Esperado: vazio *****
}
vazio InserirVazioIncorreto4 () {
locais:
	logico var;
comandos:
	retornar var;


***** Exception<Incompatibilidade>: Obtido: logico. Esperado: vazio *****
}
vazio InserirVazio (int a) {
locais:
	int var;
comandos:
	;
}
vazio InserirRec (int a) {
locais:
	int var;
comandos:
	chamar InserirRec(

***** Exception<Recursividade>: InserirRec *****
var);
}
int InserirIntCorreto1 (int a) {
locais:
	int var;
comandos:
	retornar a;
}
int InserirIntCorreto2 () {
locais:
	carac var;
comandos:
	retornar var;
}
int InserirIntIncorreto () {
locais:
	real var;
comandos:
	retornar;


***** Exception<Incompatibilidade>: Obtido: vazio. Esperado: int ou carac *****
}
int InserirIntIncorreto1 () {
locais:
	real var;
comandos:
	retornar var;


***** Exception<Incompatibilidade>: Obtido: real. Esperado: int ou carac *****
}
int InserirIntIncorreto2 () {
locais:
	logico var;
comandos:
	retornar var;


***** Exception<Incompatibilidade>: Obtido: logico. Esperado: int ou carac *****
}
carac InserirCaracIorreto1 (int a) {
locais:
	int var;
comandos:
	retornar a;
}
carac InserirCaracIorreto2 () {
locais:
	carac var;
comandos:
	retornar var;
}
carac InserirCaracIncorreto1 () {
locais:
	real var;
comandos:
	retornar var;


***** Exception<Incompatibilidade>: Obtido: real. Esperado: int ou carac *****
}
carac InserirCaracIncorreto2 () {
locais:
	logico var;
comandos:
	retornar var;


***** Exception<Incompatibilidade>: Obtido: logico. Esperado: int ou carac *****
}
real InserirRealCorreto1 () {
locais:
	int var;
comandos:
	retornar var;
}
real InserirRealCorreto2 () {
locais:
	real var;
comandos:
	retornar var;
}
real InserirRealCorreto3 () {
locais:
	carac var;
comandos:
	retornar var;
}
real InserirRealIncorreto1 () {
locais:
	logico var;
comandos:
	retornar var;


***** Exception<Incompatibilidade>: Obtido: logico. Esperado: int ou carac ou real *****
}
logico InserirLogicoCorreto1 () {
locais:
	logico var;
comandos:
	retornar var;
}
logico InserirLogicoIncorreto1 () {
locais:
	real var;
comandos:
	retornar var;


***** Exception<Incompatibilidade>: Obtido: real. Esperado: logico *****
}
logico InserirLogicoIncorreto2 () {
locais:
	carac var;
comandos:
	retornar var;


***** Exception<Incompatibilidade>: Obtido: carac. Esperado: logico *****
}
logico InserirLogicoIncorreto3 () {
locais:
	int var;
comandos:
	retornar var;


***** Exception<Incompatibilidade>: Obtido: int. Esperado: logico *****
}
int InserirParametro (int a, int b) {
locais:
	int var;
comandos:
	var := a + b;
	retornar var;
}
int InserirRecursivo (int a, int b) {
locais:
	int var;
comandos:
	retornar InserirRecursivo (

***** Exception<Recursividade>: InserirRecursivo *****
a, b);
}
int InserirFuncao (int a, int b) {
locais:
	int var;
comandos:
	retornar InserirIntCorreto2 ();
}
int FuncaoErrada (int InserirFuncao

***** Exception<Nao Esperado>: Funcao no argumento *****
, int b) {
locais:
	int var;
comandos:
	retornar InserirIntCorreto2 ();
}
principal {
locais:
	int var;
comandos:
	
/* Testando retorno de funcao vazia (procedimento) */

chamar InserirVazioCorreto();
	chamar InserirVazioIncorreto(

***** Exception<Nao Declarado>: InserirVazioIncorreto *****
);

/* Testando retorno de funcao nao vazia */

	var := InserirIntCorreto1 (InserirIntCorreto2 ()

***** Exception<Nao Esperado>: Funcao no parametro *****
);
}

varlogico: Nao Inicializada
varlogico: Nao Referenciada
var: Nao Inicializada
var: Nao Referenciada
var: Nao Inicializada
var: Nao Referenciada
var: Nao Inicializada
var: Nao Referenciada
var: Nao Inicializada
var: Nao Inicializada
var: Nao Inicializada
var: Nao Inicializada
var: Nao Inicializada
var: Nao Inicializada
var: Nao Inicializada
var: Nao Inicializada
var: Nao Inicializada
var: Nao Inicializada
var: Nao Inicializada
var: Nao Inicializada
var: Nao Referenciada
var: Nao Inicializada
var: Nao Inicializada
var: Nao Inicializada
var: Nao Referenciada
var: Nao Inicializada
var: Nao Inicializada
var: Nao Referenciada
var: Nao Inicializada
var: Nao Inicializada
var: Nao Referenciada
var: Nao Inicializada
var: Nao Inicializada
var: Nao Inicializada
var: Nao Inicializada
var: Nao Inicializada
var: Nao Referenciada
varchar: Nao Inicializada
varchar: Nao Referenciada
varreal: Nao Inicializada
varreal: Nao Referenciada
varint: Nao Inicializada
varint: Nao Referenciada


	TABELA  DE  SIMBOLOS:

Classe 0:
  (InserirVazioIncorreto4, IDFUNC, vazio , escopo: Global
	Variaveis: logico var
	Parametros: NULL);
  (varlogico, IDVAR, logico, 0, 0, escopo: Global);
Classe 2:
  (InserirFuncao, IDVAR, int   , 1, 1, escopo: FuncaoErrada);
  (InserirFuncao, IDFUNC, int   , escopo: Global
	Variaveis: int var
	Parametros: int a, int b);
  (InserirRealIncorreto1, IDFUNC, real  , escopo: Global
	Variaveis: logico var
	Parametros: NULL);
  (InserirIntIncorreto, IDFUNC, int   , escopo: Global
	Variaveis: real var
	Parametros: NULL);
  (InserirRec, IDFUNC, vazio , escopo: Global
	Variaveis: int var
	Parametros: int a);
Classe 4:
  (InserirLogicoCorreto1, IDFUNC, logico, escopo: Global
	Variaveis: logico var
	Parametros: NULL);
Classe 5:
  (a       , IDVAR, int   , 1, 1, escopo: InserirFuncao);
  (a       , IDVAR, int   , 1, 1, escopo: InserirRecursivo);
  (a       , IDVAR, int   , 1, 1, escopo: InserirParametro);
  (a       , IDVAR, int   , 1, 1, escopo: InserirCaracIorreto1);
  (InserirIntIncorreto1, IDFUNC, int   , escopo: Global
	Variaveis: real var
	Parametros: NULL);
  (a       , IDVAR, int   , 1, 1, escopo: InserirIntCorreto1);
  (a       , IDVAR, int   , 1, 1, escopo: InserirRec);
  (a       , IDVAR, int   , 1, 1, escopo: InserirVazio);
Classe 6:
  (b       , IDVAR, int   , 1, 1, escopo: FuncaoErrada);
  (b       , IDVAR, int   , 1, 1, escopo: InserirFuncao);
  (b       , IDVAR, int   , 1, 1, escopo: InserirRecursivo);
  (b       , IDVAR, int   , 1, 1, escopo: InserirParametro);
  (InserirIntIncorreto2, IDFUNC, int   , escopo: Global
	Variaveis: logico var
	Parametros: NULL);
Classe 7:
  (var     , IDVAR, int   , 1, 1, escopo: Principal);
  (var     , IDVAR, int   , 0, 0, escopo: FuncaoErrada);
  (var     , IDVAR, int   , 0, 0, escopo: InserirFuncao);
  (var     , IDVAR, int   , 0, 0, escopo: InserirRecursivo);
  (var     , IDVAR, int   , 1, 1, escopo: InserirParametro);
  (var     , IDVAR, int   , 0, 1, escopo: InserirLogicoIncorreto3);
  (var     , IDVAR, carac , 0, 1, escopo: InserirLogicoIncorreto2);
  (var     , IDVAR, real  , 0, 1, escopo: InserirLogicoIncorreto1);
  (var     , IDVAR, logico, 0, 1, escopo: InserirLogicoCorreto1);
  (var     , IDVAR, logico, 0, 1, escopo: InserirRealIncorreto1);
  (var     , IDVAR, carac , 0, 1, escopo: InserirRealCorreto3);
  (var     , IDVAR, real  , 0, 1, escopo: InserirRealCorreto2);
  (var     , IDVAR, int   , 0, 1, escopo: InserirRealCorreto1);
  (var     , IDVAR, logico, 0, 1, escopo: InserirCaracIncorreto2);
  (var     , IDVAR, real  , 0, 1, escopo: InserirCaracIncorreto1);
  (var     , IDVAR, carac , 0, 1, escopo: InserirCaracIorreto2);
  (var     , IDVAR, int   , 0, 0, escopo: InserirCaracIorreto1);
  (var     , IDVAR, logico, 0, 1, escopo: InserirIntIncorreto2);
  (var     , IDVAR, real  , 0, 1, escopo: InserirIntIncorreto1);
  (var     , IDVAR, real  , 0, 0, escopo: InserirIntIncorreto);
  (var     , IDVAR, carac , 0, 1, escopo: InserirIntCorreto2);
  (var     , IDVAR, int   , 0, 0, escopo: InserirIntCorreto1);
  (var     , IDVAR, int   , 0, 1, escopo: InserirRec);
  (var     , IDVAR, int   , 0, 0, escopo: InserirVazio);
  (var     , IDVAR, logico, 0, 1, escopo: InserirVazioIncorreto4);
  (var     , IDVAR, carac , 0, 1, escopo: InserirVazioIncorreto3);
  (var     , IDVAR, real  , 0, 1, escopo: InserirVazioIncorreto2);
  (var     , IDVAR, int   , 0, 1, escopo: InserirVazioIncorreto1);
  (var     , IDVAR, int   , 0, 0, escopo: InserirVazioCorreto);
  (varchar , IDVAR, carac , 0, 0, escopo: Global);
Classe 9:
  (InserirVazioCorreto, IDFUNC, vazio , escopo: Global
	Variaveis: int var
	Parametros: NULL);
Classe 10:
  (Principal, IDFUNC, vazio , escopo: Global
	Variaveis: int var
	Parametros: NULL);
Classe 11:
  (InserirVazio, IDFUNC, vazio , escopo: Global
	Variaveis: int var
	Parametros: int a);
Classe 12:
  (InserirLogicoIncorreto1, IDFUNC, logico, escopo: Global
	Variaveis: real var
	Parametros: NULL);
Classe 13:
  (InserirLogicoIncorreto2, IDFUNC, logico, escopo: Global
	Variaveis: carac var
	Parametros: NULL);
  (varreal , IDVAR, real  , 0, 0, escopo: Global);
Classe 14:
  (InserirLogicoIncorreto3, IDFUNC, logico, escopo: Global
	Variaveis: int var
	Parametros: NULL);
Classe 15:
  (InserirRecursivo, IDFUNC, int   , escopo: Global
	Variaveis: int var
	Parametros: int a, int b);
  (InserirParametro, IDFUNC, int   , escopo: Global
	Variaveis: int var
	Parametros: int a, int b);
Classe 16:
  (varint  , IDVAR, int   , 0, 0, escopo: Global);
Classe 17:
  (InserirRealCorreto1, IDFUNC, real  , escopo: Global
	Variaveis: int var
	Parametros: NULL);
  (InserirCaracIorreto1, IDFUNC, carac , escopo: Global
	Variaveis: int var
	Parametros: int a);
Classe 18:
  (InserirRealCorreto2, IDFUNC, real  , escopo: Global
	Variaveis: real var
	Parametros: NULL);
  (InserirCaracIorreto2, IDFUNC, carac , escopo: Global
	Variaveis: carac var
	Parametros: NULL);
  (Global  , IDGLOB, null  , escopo: NULL
	Variaveis: int varint, real varreal, carac varchar, logico varlogico
	Funcoes: vazio InserirVazioCorreto, vazio InserirVazioIncorreto1, vazio InserirVazioIncorreto2, vazio InserirVazioIncorreto3, vazio InserirVazioIncorreto4, vazio InserirVazio, vazio InserirRec, int InserirIntCorreto1, int InserirIntCorreto2, int InserirIntIncorreto, int InserirIntIncorreto1, int InserirIntIncorreto2, carac InserirCaracIorreto1, carac InserirCaracIorreto2, carac InserirCaracIncorreto1, carac InserirCaracIncorreto2, real InserirRealCorreto1, real InserirRealCorreto2, real InserirRealCorreto3, real InserirRealIncorreto1, logico InserirLogicoCorreto1, logico InserirLogicoIncorreto1, logico InserirLogicoIncorreto2, logico InserirLogicoIncorreto3, int InserirParametro, int InserirRecursivo, int InserirFuncao, int FuncaoErrada, vazio Principal);
Classe 19:
  (InserirRealCorreto3, IDFUNC, real  , escopo: Global
	Variaveis: carac var
	Parametros: NULL);
  (InserirCaracIncorreto1, IDFUNC, carac , escopo: Global
	Variaveis: real var
	Parametros: NULL);
Classe 20:
  (InserirCaracIncorreto2, IDFUNC, carac , escopo: Global
	Variaveis: logico var
	Parametros: NULL);
  (InserirIntCorreto1, IDFUNC, int   , escopo: Global
	Variaveis: int var
	Parametros: int a);
  (InserirVazioIncorreto1, IDFUNC, vazio , escopo: Global
	Variaveis: int var
	Parametros: NULL);
Classe 21:
  (InserirIntCorreto2, IDFUNC, int   , escopo: Global
	Variaveis: carac var
	Parametros: NULL);
  (InserirVazioIncorreto2, IDFUNC, vazio , escopo: Global
	Variaveis: real var
	Parametros: NULL);
Classe 22:
  (FuncaoErrada, IDFUNC, int   , escopo: Global
	Variaveis: int var
	Parametros: int InserirFuncao, int b);
  (InserirVazioIncorreto3, IDFUNC, vazio , escopo: Global
	Variaveis: carac var
	Parametros: NULL);


	CODIGO INTEMEDIARIO:


