Especificações semânticas de COMP-ITA 2016 


####################################################TO DO####################################################

	#### Arquivo BenchPara ####

•	As expressões nos cabeçalhos de comandos se e enquanto e no encerramento de comandos repetir devem ser relacionais ou lógicas.
•	A variável da inicialização do cabeçalho de um comando para deve ser escalar do tipo inteiro ou caractere.
•	A variável da atualização do cabeçalho de um comando para deve ser a mesma daquela de sua inicialização.
•	A primeira e a terceira expressão de um comando para deve ser do tipo inteiro ou caractere e a segunda expressão deve ser do tipo lógico.

	#### Arquivo BenchCallFunc ####

•	O identificador de uma chamada de procedimento e o identificador de uma chamada de função deve ser do tipo nome de função. 
•	Um identificador de variável e de parâmetro deve ser do tipo nome de variável.
•	O tipo de variável correspondente ao identificador de uma chamada de procedimento deve ser o tipo vazio.
•	O tipo de variável correspondente ao identificador de uma chamada de função não deve ser o tipo vazio.
•	O número de argumentos na chamada de uma função ou procedimento deve ser igual ao número de parâmetros do mesmo. 
•	Deve haver compatibilidade entre um argumento de chamada de uma função ou procedimento e seu parâmetro correspondente, conforme a seguinte tabela:

								Tipo do parâmetro	Tipo do argumento
								Inteiro	Expressão inteira ou caractere
								Real	Expressão inteira, real ou caractere
								Caractere	Expressão inteira ou caractere
								Lógico	Expressão de valor lógico

	#### Arquivo BenchRetornoFunc ####

•	Todo comando retornar dentro de uma função de tipo vazio não deve ser seguido de expressão e dentro de funções de outros tipos deve ser seguido por uma expressão. 
•	Deve haver compatibilidade entre o tipo de uma função e o tipo da expressão de qualquer comando retornar em seu escopo, conforme a seguinte tabela:
								Tipo da função	Tipo da expressão retornada
								Inteiro	Inteiro ou Caractere
								Real	Inteiro, Real ou Caractere
								Caractere	Inteiro ou Caractere
								Lógico	Lógico

•	Funções não são usados como parâmetros ou argumentos de chamada de outras funções.
•	A linguagem não admite recursividade.

####################################################TEST####################################################

	#### Arquivo BenchIndexada ####

•	A constante inteira usada no dimensionamento de uma variável indexada deve ser maior do que zero.
•	Variáveis escalares não podem ter subscritos.
•	O número de subscritos de uma variável indexada deve ser igual ao seu número de dimensões declarado.
•	Os elementos de uma variável indexada só poderão ser atribuídos ou receber atribuição um de cada vez.
•	Os elementos de uma variável indexada só poderão ser lidos, ou escritos um de cada vez.
•	A expressão aritmética no subscrito de uma variável indexada deve ser do tipo inteiro ou caractere.

	#### Arquivo BenchCompatibilidade ####

•	Deve haver compatibilidade entre os tipos dos dois lados de um comando de atribuição, conforme a seguinte tabela:
								Tipo do lado esquerdo	Tipo do lado direito
								Inteiro	Inteiro ou Caractere
								Real	Inteiro, Real ou Caractere
								Caractere	Inteiro ou Caractere
								Lógico	Lógico

•	Os tipos dos resultados das diversas classes de expressões só podem ser os seguintes:
									Classe da expressão	Tipo
									Aritmética	Inteiro, Real ou Caractere
									Relacional	Lógico
									Lógica	Lógico

•	Os tipos dos operandos admitidos pelos operadores de expressões são os seguintes:
								Operadores	Tipos admitidos dos operandos
								||  &&  !	Lógico
								<  <=  >  >=  	Inteiro, Real ou Caractere
								=  !=	Todos (se um for lógico o outro também deve ser)
								+  -  *  /  ~	Inteiro, Real ou Caractere
								%	Inteiro ou Caractere

####################################################DONE####################################################

	#### Arquivo BenchDeclaracao ####

•	Qualquer identificador deve ser declarado antes de usado.
•	Um identificador não pode estar declarado mais de uma vez dentro de uma função, ou como global, mas pode estar declarado ao mesmo tempo como global e numa função qualquer, ou em duas ou mais funções quaisquer.
•	Identificadores podem ser do tipo nome de variável ou nome de função.
•	Variáveis escalares, expressões e elementos de variáveis indexadas podem ser do tipo inteiro, real, caractere ou lógico.
•	O tipo de uma variável comum ou de um parâmetro não pode ser o tipo vazio.
•	Toda variável escalar e ao menos um elemento de cada variável indexada deve ser inicializado e referenciado pelo menos uma vez no programa.

	#### Arquivo BenchPrincipal ####

•	O programa deve ter uma e uma só função de cabeçalho principal, devendo esta ser a última função desse programa.
•	Uma função não pode ter o mesmo nome que o de uma variável global.