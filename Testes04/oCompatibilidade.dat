
/*
	Testes Realizados:

•	Deve haver compatibilidade entre os tipos dos dois lados de um comando de atribuição, conforme a seguinte tabela:
								Tipo do lado esquerdo	Tipo do lado direito
								Inteiro	Inteiro ou Caractere
								Real	Inteiro, Real ou Caractere
								Caractere	Inteiro ou Caractere
								Lógico	Lógico

•	Os tipos dos resultados das diversas classes de expressões só podem ser os seguintes:
									Classe da expressão	Tipo
									Aritmética	Inteiro, Real ou Caractere
									Relacional	Lógico
									Lógica	Lógico

•	Os tipos dos operandos admitidos pelos operadores de expressões são os seguintes:
								Operadores	Tipos admitidos dos operandos
								||  &&  !	Lógico
								<  <=  >  >=  	Inteiro, Real ou Caractere
								=  !=	Todos (se um for lógico o outro também deve ser)
								+  -  *  /  ~	Inteiro, Real ou Caractere
								%	Inteiro ou Caractere

 */

globais:
	int varInteiro, exprI;
	real varReal, exprR;
	carac varCarac, exprC;
	logico varLogico, exprL;

funcoes:
vazio Inteiro () {
locais:
	int var;
comandos:
	var := varInteiro;
	var := varCarac;
	var := varReal;


***** Exception<Incompatibilidade>: Obtido: real. Esperado: int ou carac *****
	var := varLogico;


***** Exception<Incompatibilidade>: Obtido: logico. Esperado: int ou carac *****
}
vazio Real () {
locais:
	real var;
comandos:
	var := varInteiro;
	var := varCarac;
	var := varReal;
	var := varLogico;


***** Exception<Incompatibilidade>: Obtido: logico. Esperado: int ou carac ou real *****
}
vazio Carac () {
locais:
	carac var;
comandos:
	var := varInteiro;
	var := varCarac;
	var := varReal;


***** Exception<Incompatibilidade>: Obtido: real. Esperado: int ou carac *****
	var := varLogico;


***** Exception<Incompatibilidade>: Obtido: logico. Esperado: int ou carac *****
}
vazio Logico () {
locais:
	logico var;
comandos:
	var := varInteiro;


***** Exception<Incompatibilidade>: Obtido: int. Esperado: logico *****
	var := varCarac;


***** Exception<Incompatibilidade>: Obtido: carac. Esperado: logico *****
	var := varReal;


***** Exception<Incompatibilidade>: Obtido: real. Esperado: logico *****
	var := varLogico;
}
vazio ExprAritmetica () {
locais:
	int var;
comandos:
	exprI := (1 + 1);
	exprC := ('c'  - 'a' );
	exprR := (2 / 4);
	exprL := (true + true

***** Exception<Incompatibilidade>: Operando improprio para operador aritmetico *****
);


***** Exception<Incompatibilidade>: Obtido: int. Esperado: logico *****
}
vazio ExprRelacional () {
locais:
	int var;
comandos:
	exprI := (2 = 1);


***** Exception<Incompatibilidade>: Obtido: logico. Esperado: int ou carac *****
	exprC := (2 != 1);


***** Exception<Incompatibilidade>: Obtido: logico. Esperado: int ou carac *****
	exprR := (2 >= 1);


***** Exception<Incompatibilidade>: Obtido: logico. Esperado: int ou carac ou real *****
	exprL := (2 > 1);
}
vazio ExprLogica () {
locais:
	int var;
comandos:
	exprI := (true || false);


***** Exception<Incompatibilidade>: Obtido: logico. Esperado: int ou carac *****
	exprC := (true && true);


***** Exception<Incompatibilidade>: Obtido: logico. Esperado: int ou carac *****
	exprR := (!true);


***** Exception<Incompatibilidade>: Obtido: logico. Esperado: int ou carac ou real *****
	exprL := (!false);
}
vazio OpLogico () {
locais:
	int var;
comandos:
	varLogico := varLogico && varLogico;
	varLogico := varLogico || varLogico;
	varLogico := !varLogico;
	varLogico := varInteiro && varCarac

***** Exception<Incompatibilidade>: Operando improprio para AND *****
;
	varLogico := varInteiro || varCarac

***** Exception<Incompatibilidade>: Operando improprio para OR *****
;
	varLogico := !varInteiro

***** Exception<Incompatibilidade>: Operando improprio para NOT *****
;
}
vazio OpRelacional () {
locais:
	int var;
comandos:
	varLogico := varInteiro > varInteiro;
	varLogico := varReal >= varInteiro;
	varLogico := varInteiro < varCarac;
	varLogico := varLogico <= varCarac

***** Exception<Incompatibilidade>: Operando improprio para operador relacional *****
;
}
vazio OpIgualdade () {
locais:
	int var;
comandos:
	varLogico := varInteiro = varCarac;
	varLogico := varReal != varCarac;
	varLogico := varLogico = varLogico;
	varLogico := varLogico != varInteiro

***** Exception<Incompatibilidade>: Operando improprio para operador relacional *****
;
}
vazio OpAritmetico () {
locais:
	int var;
comandos:
	varInteiro := varInteiro + varCarac;
	varReal := varReal * varCarac;
	varInteiro := varLogico / varLogico

***** Exception<Incompatibilidade>: Operando improprio para operador aritmetico *****
;
	varInteiro := varLogico - varInteiro

***** Exception<Incompatibilidade>: Operando improprio para operador aritmetico *****
;
	varInteiro := ~varInteiro;
	varInteiro := varInteiro % varInteiro;
	varInteiro := varCarac % varCarac;
}
principal {
locais:
	int var;
comandos:
	;
}

var: Nao Inicializada
var: Nao Referenciada
var: Nao Inicializada
var: Nao Referenciada
var: Nao Inicializada
var: Nao Referenciada
var: Nao Inicializada
var: Nao Referenciada
var: Nao Inicializada
var: Nao Referenciada
var: Nao Inicializada
var: Nao Referenciada
var: Nao Inicializada
var: Nao Referenciada
var: Nao Inicializada
var: Nao Referenciada
varCarac: Nao Inicializada


	TABELA  DE  SIMBOLOS:

Classe 0:
  (exprR   , IDVAR, real  , 1, 1, escopo: Global);
Classe 1:
  (varInteiro, IDVAR, int   , 1, 1, escopo: Global);
Classe 4:
  (##1     , IDVAR, int   , 1, 1, escopo: ExprAritmetica);
  (varReal , IDVAR, real  , 1, 1, escopo: Global);
Classe 5:
  (##2     , IDVAR, int   , 1, 1, escopo: ExprAritmetica);
Classe 6:
  (OpIgualdade, IDFUNC, vazio , escopo: Global
	Variaveis: int var, logico ##23, logico ##24, logico ##25, logico ##26
	Parametros: NULL);
  (##10    , IDVAR, logico, 1, 1, escopo: ExprLogica);
  (##3     , IDVAR, real  , 1, 1, escopo: ExprAritmetica);
Classe 7:
  (var     , IDVAR, int   , 0, 0, escopo: Principal);
  (var     , IDVAR, int   , 0, 0, escopo: OpAritmetico);
  (var     , IDVAR, int   , 0, 0, escopo: OpIgualdade);
  (##20    , IDVAR, logico, 1, 1, escopo: OpRelacional);
  (var     , IDVAR, int   , 0, 0, escopo: OpRelacional);
  (var     , IDVAR, int   , 0, 0, escopo: OpLogico);
  (##11    , IDVAR, logico, 1, 1, escopo: ExprLogica);
  (var     , IDVAR, int   , 0, 0, escopo: ExprLogica);
  (var     , IDVAR, int   , 0, 0, escopo: ExprRelacional);
  (ExprRelacional, IDFUNC, vazio , escopo: Global
	Variaveis: int var, logico ##5, logico ##6, logico ##7, logico ##8
	Parametros: NULL);
  (##4     , IDVAR, int   , 1, 1, escopo: ExprAritmetica);
  (var     , IDVAR, int   , 0, 0, escopo: ExprAritmetica);
  (var     , IDVAR, logico, 1, 1, escopo: Logico);
  (Logico  , IDFUNC, vazio , escopo: Global
	Variaveis: logico var
	Parametros: NULL);
  (var     , IDVAR, carac , 1, 1, escopo: Carac);
  (var     , IDVAR, real  , 1, 1, escopo: Real);
  (var     , IDVAR, int   , 1, 1, escopo: Inteiro);
Classe 8:
  (##30    , IDVAR, int   , 1, 1, escopo: OpAritmetico);
  (##21    , IDVAR, logico, 1, 1, escopo: OpRelacional);
  (##12    , IDVAR, logico, 1, 1, escopo: ExprLogica);
  (##5     , IDVAR, logico, 1, 1, escopo: ExprRelacional);
  (exprC   , IDVAR, carac , 1, 1, escopo: Global);
Classe 9:
  (##31    , IDVAR, int   , 1, 1, escopo: OpAritmetico);
  (##22    , IDVAR, logico, 1, 1, escopo: OpRelacional);
  (##13    , IDVAR, logico, 1, 1, escopo: OpLogico);
  (##6     , IDVAR, logico, 1, 1, escopo: ExprRelacional);
Classe 10:
  (Principal, IDFUNC, vazio , escopo: Global
	Variaveis: int var
	Parametros: NULL);
  (##32    , IDVAR, int   , 1, 1, escopo: OpAritmetico);
  (##23    , IDVAR, logico, 1, 1, escopo: OpIgualdade);
  (##14    , IDVAR, logico, 1, 1, escopo: OpLogico);
  (##7     , IDVAR, logico, 1, 1, escopo: ExprRelacional);
Classe 11:
  (##33    , IDVAR, int   , 1, 1, escopo: OpAritmetico);
  (##24    , IDVAR, logico, 1, 1, escopo: OpIgualdade);
  (##15    , IDVAR, logico, 1, 1, escopo: OpLogico);
  (##8     , IDVAR, logico, 1, 1, escopo: ExprRelacional);
Classe 12:
  (##25    , IDVAR, logico, 1, 1, escopo: OpIgualdade);
  (##16    , IDVAR, logico, 1, 1, escopo: OpLogico);
  (##9     , IDVAR, logico, 1, 1, escopo: ExprLogica);
Classe 13:
  (OpAritmetico, IDFUNC, vazio , escopo: Global
	Variaveis: int var, int ##27, real ##28, int ##29, int ##30, int ##31, int ##32, int ##33
	Parametros: NULL);
  (##26    , IDVAR, logico, 1, 1, escopo: OpIgualdade);
  (OpRelacional, IDFUNC, vazio , escopo: Global
	Variaveis: int var, logico ##19, logico ##20, logico ##21, logico ##22
	Parametros: NULL);
  (##17    , IDVAR, logico, 1, 1, escopo: OpLogico);
Classe 14:
  (##27    , IDVAR, int   , 1, 1, escopo: OpAritmetico);
  (##18    , IDVAR, int   , 1, 1, escopo: OpLogico);
  (OpLogico, IDFUNC, vazio , escopo: Global
	Variaveis: int var, logico ##13, logico ##14, logico ##15, logico ##16, logico ##17, int ##18
	Parametros: NULL);
  (Carac   , IDFUNC, vazio , escopo: Global
	Variaveis: carac var
	Parametros: NULL);
  (varLogico, IDVAR, logico, 1, 1, escopo: Global);
  (exprI   , IDVAR, int   , 1, 1, escopo: Global);
Classe 15:
  (##28    , IDVAR, real  , 1, 1, escopo: OpAritmetico);
  (##19    , IDVAR, logico, 1, 1, escopo: OpRelacional);
Classe 16:
  (##29    , IDVAR, int   , 1, 1, escopo: OpAritmetico);
  (ExprAritmetica, IDFUNC, vazio , escopo: Global
	Variaveis: int var, int ##1, int ##2, real ##3, int ##4
	Parametros: NULL);
Classe 17:
  (ExprLogica, IDFUNC, vazio , escopo: Global
	Variaveis: int var, logico ##9, logico ##10, logico ##11, logico ##12
	Parametros: NULL);
  (Inteiro , IDFUNC, vazio , escopo: Global
	Variaveis: int var
	Parametros: NULL);
  (exprL   , IDVAR, logico, 1, 1, escopo: Global);
Classe 18:
  (Global  , IDGLOB, null  , escopo: NULL
	Variaveis: int varInteiro, int exprI, real varReal, real exprR, carac varCarac, carac exprC, logico varLogico, logico exprL
	Funcoes: vazio Inteiro, vazio Real, vazio Carac, vazio Logico, vazio ExprAritmetica, vazio ExprRelacional, vazio ExprLogica, vazio OpLogico, vazio OpRelacional, vazio OpIgualdade, vazio OpAritmetico, vazio Principal);
Classe 20:
  (Real    , IDFUNC, vazio , escopo: Global
	Variaveis: real var
	Parametros: NULL);
Classe 21:
  (varCarac, IDVAR, carac , 0, 1, escopo: Global);


	CODIGO INTEMEDIARIO:


Quadruplas do modulo Global:

	   1# OPENMOD, (MODULO, Global), (IDLE), (IDLE)
	   2# ATRIB, (VAR, varInteiro), (IDLE), (IDLE)
	   3# ATRIB, (VAR, varCarac), (IDLE), (IDLE)
	   4# ATRIB, (VAR, varReal), (IDLE), (IDLE)
	   5# ATRIB, (VAR, varLogico), (IDLE), (IDLE)
	   6# ATRIB, (VAR, varInteiro), (IDLE), (IDLE)
	   7# ATRIB, (VAR, varCarac), (IDLE), (IDLE)
	   8# ATRIB, (VAR, varReal), (IDLE), (IDLE)
	   9# ATRIB, (VAR, varLogico), (IDLE), (IDLE)
	  10# ATRIB, (VAR, varInteiro), (IDLE), (IDLE)
	  11# ATRIB, (VAR, varCarac), (IDLE), (IDLE)
	  12# ATRIB, (VAR, varReal), (IDLE), (IDLE)
	  13# ATRIB, (VAR, varLogico), (IDLE), (IDLE)
	  14# ATRIB, (VAR, varInteiro), (IDLE), (IDLE)
	  15# ATRIB, (VAR, varCarac), (IDLE), (IDLE)
	  16# ATRIB, (VAR, varReal), (IDLE), (IDLE)
	  17# ATRIB, (VAR, varLogico), (IDLE), (IDLE)
	  18# MAIS, (INT, 1), (INT, 1), (VAR, ##1)
	  19# ATRIB, (VAR, ##1), (IDLE), (IDLE)
	  20# MENOS, (CARAC, c), (CARAC, a), (VAR, ##2)
	  21# ATRIB, (VAR, ##2), (IDLE), (IDLE)
	  22# DIV, (REAL, 2), (REAL, 4), (VAR, ##3)
	  23# ATRIB, (VAR, ##3), (IDLE), (IDLE)
	  24# MAIS, (LOGIC, 1), (LOGIC, 1), (VAR, ##4)
	  25# ATRIB, (VAR, ##4), (IDLE), (IDLE)
	  26# EQ, (INT, 2), (INT, 1), (VAR, ##5)
	  27# ATRIB, (VAR, ##5), (IDLE), (IDLE)
	  28# NE, (INT, 2), (INT, 1), (VAR, ##6)
	  29# ATRIB, (VAR, ##6), (IDLE), (IDLE)
	  30# GE, (INT, 2), (INT, 1), (VAR, ##7)
	  31# ATRIB, (VAR, ##7), (IDLE), (IDLE)
	  32# GT, (INT, 2), (INT, 1), (VAR, ##8)
	  33# ATRIB, (VAR, ##8), (IDLE), (IDLE)
	  34# OR, (LOGIC, 1), (LOGIC, 0), (VAR, ##9)
	  35# ATRIB, (VAR, ##9), (IDLE), (IDLE)
	  36# AND, (LOGIC, 1), (LOGIC, 1), (VAR, ##10)
	  37# ATRIB, (VAR, ##10), (IDLE), (IDLE)
	  38# NOT, (LOGIC, 1), (IDLE), (VAR, ##11)
	  39# ATRIB, (VAR, ##11), (IDLE), (IDLE)
	  40# NOT, (LOGIC, 0), (IDLE), (VAR, ##12)
	  41# ATRIB, (VAR, ##12), (IDLE), (IDLE)
	  42# AND, (VAR, varLogico), (VAR, varLogico), (VAR, ##13)
	  43# ATRIB, (VAR, ##13), (IDLE), (IDLE)
	  44# OR, (VAR, varLogico), (VAR, varLogico), (VAR, ##14)
	  45# ATRIB, (VAR, ##14), (IDLE), (IDLE)
	  46# NOT, (VAR, varLogico), (IDLE), (VAR, ##15)
	  47# ATRIB, (VAR, ##15), (IDLE), (IDLE)
	  48# AND, (VAR, varInteiro), (VAR, varCarac), (VAR, ##16)
	  49# ATRIB, (VAR, ##16), (IDLE), (IDLE)
	  50# OR, (VAR, varInteiro), (VAR, varCarac), (VAR, ##17)
	  51# ATRIB, (VAR, ##17), (IDLE), (IDLE)
	  52# NOT, (VAR, varInteiro), (IDLE), (VAR, ##18)
	  53# ATRIB, (VAR, ##18), (IDLE), (IDLE)
	  54# GT, (VAR, varInteiro), (VAR, varInteiro), (VAR, ##19)
	  55# ATRIB, (VAR, ##19), (IDLE), (IDLE)
	  56# GE, (VAR, varReal), (VAR, varInteiro), (VAR, ##20)
	  57# ATRIB, (VAR, ##20), (IDLE), (IDLE)
	  58# LT, (VAR, varInteiro), (VAR, varCarac), (VAR, ##21)
	  59# ATRIB, (VAR, ##21), (IDLE), (IDLE)
	  60# LE, (VAR, varLogico), (VAR, varCarac), (VAR, ##22)
	  61# ATRIB, (VAR, ##22), (IDLE), (IDLE)
	  62# EQ, (VAR, varInteiro), (VAR, varCarac), (VAR, ##23)
	  63# ATRIB, (VAR, ##23), (IDLE), (IDLE)
	  64# NE, (VAR, varReal), (VAR, varCarac), (VAR, ##24)
	  65# ATRIB, (VAR, ##24), (IDLE), (IDLE)
	  66# EQ, (VAR, varLogico), (VAR, varLogico), (VAR, ##25)
	  67# ATRIB, (VAR, ##25), (IDLE), (IDLE)
	  68# NE, (VAR, varLogico), (VAR, varInteiro), (VAR, ##26)
	  69# ATRIB, (VAR, ##26), (IDLE), (IDLE)
	  70# MAIS, (VAR, varInteiro), (VAR, varCarac), (VAR, ##27)
	  71# ATRIB, (VAR, ##27), (IDLE), (IDLE)
	  72# MULT, (VAR, varReal), (VAR, varCarac), (VAR, ##28)
	  73# ATRIB, (VAR, ##28), (IDLE), (IDLE)
	  74# DIV, (VAR, varLogico), (VAR, varLogico), (VAR, ##29)
	  75# ATRIB, (VAR, ##29), (IDLE), (IDLE)
	  76# MENOS, (VAR, varLogico), (VAR, varInteiro), (VAR, ##30)
	  77# ATRIB, (VAR, ##30), (IDLE), (IDLE)
	  78# MENUN, (VAR, varInteiro), (IDLE), (VAR, ##31)
	  79# ATRIB, (VAR, ##31), (IDLE), (IDLE)
	  80# RESTO, (VAR, varInteiro), (VAR, varInteiro), (VAR, ##32)
	  81# ATRIB, (VAR, ##32), (IDLE), (IDLE)
	  82# RESTO, (VAR, varCarac), (VAR, varCarac), (VAR, ##33)
	  83# ATRIB, (VAR, ##33), (IDLE), (IDLE)
